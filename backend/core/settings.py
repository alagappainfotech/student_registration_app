"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-g**)8t(4h4gidl2$o^mxo!cz*l$isy)jp1rl8^wv-2)4q1q-&i'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['192.168.1.42','localhost','127.0.0.1','192.168.1.42:8000','192.168.1.42:5173', 'api.alagappainfotech.com','ace.alagappainfotech.com']

# Allow local frontend dev server for CSRF and CORS
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5176",
    "http://127.0.0.1:5176",
    "http://localhost:5174",
    "http://127.0.0.1:5174",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "https://api.alagappainfotech.com",
    "https://aae.alagappainfotech.com",
]

# CORS settings for development
CORS_ALLOW_ALL_ORIGINS = True  # For development only; restrict in production
CORS_ALLOW_CREDENTIALS = True

# CORS allowed origins
CORS_ALLOWED_ORIGINS = [
    'http://localhost:5176',
    'http://127.0.0.1:5176',
    'http://localhost:5174',
    'http://127.0.0.1:5174',
    'http://localhost:5173',
    'http://127.0.0.1:5173',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'https://api.alagappainfotech.com',
    'https://aae.alagappainfotech.com',
]

# Allow all headers and methods for development
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Frontend URL for email links
FRONTEND_URL = os.getenv('FRONTEND_URL', 'http://localhost:5173')

# Email Configuration
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST', '')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@example.com')

# For development - print emails to console if no email backend is configured
if DEBUG and EMAIL_BACKEND == 'django.core.mail.backends.console.EmailBackend':
    print('Using console email backend. Emails will be printed to console.')


# Application definition

import logging

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{asctime}] {levelname} {module} {process:d} {thread:d} {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'debug': {
            'format': '[{asctime}] {levelname} {module} {pathname}:{lineno} {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': '/Users/acharyathiyagarajan/CascadeProjects/student_registration_app/logs/backend/server.log',
            'formatter': 'debug',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'registration': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'rest_framework': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'rest_framework_simplejwt': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        '': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    }
}

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'registration.backends.EmailBackend',  # Custom email authentication backend
    'django.contrib.auth.backends.ModelBackend',  # Default Django authentication backend
]

# Custom user model
AUTH_USER_MODEL = 'registration.User'  # Assuming you have a custom User model in the registration app

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'registration',
    'corsheaders',
]

MIDDLEWARE = [
    # Security middleware (first to ensure security headers are set early)
    'django.middleware.security.SecurityMiddleware',
    
    # WhiteNoise middleware (for serving static files in production)
    'whitenoise.middleware.WhiteNoiseMiddleware',
    
    # Session middleware (needs to be before authentication)
    'django.contrib.sessions.middleware.SessionMiddleware',
    
    # CORS middleware (should be before any middleware that can generate responses)
    'corsheaders.middleware.CorsMiddleware',
    
    # Common middleware (handles URL rewriting, etc.)
    'django.middleware.common.CommonMiddleware',
    
    # CSRF middleware (should be after SessionMiddleware)
    'django.middleware.csrf.CsrfViewMiddleware',
    
    # Authentication middleware (needs to come after SessionMiddleware)
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    
    # Message middleware (needs to come after SessionMiddleware)
    'django.contrib.messages.middleware.MessageMiddleware',
    
    # Clickjacking protection
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    # Custom logging middleware (should be one of the last)
    'core.middleware.DetailedLoggingMiddleware',
]

# ============================================================================
# CORS (Cross-Origin Resource Sharing) Settings
# ============================================================================

# For development, you can set this to True to allow all origins
# In production, set to False and specify allowed origins in CORS_ALLOWED_ORIGINS
CORS_ALLOW_ALL_ORIGINS = True  # Set to False in production
CORS_ALLOW_CREDENTIALS = True  # Important for sending cookies with requests
CORS_ALLOW_PRIVATE_NETWORK = True  # Allow requests from private networks

# List of allowed origins (used when CORS_ALLOW_ALL_ORIGINS is False)
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',  # Default React port
    'http://localhost:8000',  # Default Django port
    'http://localhost:5176',  # Vite dev server (frontend)
    'http://127.0.0.1:5176',  # Vite dev server (frontend)
    'http://127.0.0.1:8000',  # Django dev server
    'http://192.168.1.42:8000',  # Local network
    'http://192.168.1.42:5176',  # Local network (frontend),
    'https://aae.alagappainfotech.com'
]

# CORS Preflight cache duration (in seconds)
CORS_PREFLIGHT_MAX_AGE = 86400  # 1 day

# Allowed HTTP methods for CORS requests
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Headers allowed in CORS requests
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-xsrf-token',
    'access-control-allow-origin',
    'access-control-allow-credentials',
    'access-control-allow-headers',
    'access-control-allow-methods',
]

# Headers to expose in responses
CORS_EXPOSE_HEADERS = [
    'content-type',
    'x-csrftoken',
    'authorization',
    'x-xsrf-token',
    'access-control-allow-origin',
    'access-control-allow-credentials',
    'access-control-allow-headers',
    'access-control-allow-methods',
]

# Session settings
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # or 'django.contrib.sessions.backends.cached_db' for better performance
SESSION_COOKIE_AGE = 60 * 60 * 24 * 14  # 2 weeks, in seconds
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Keep session alive after browser close
SESSION_SAVE_EVERY_REQUEST = True  # Save the session to the database on every request

# Session cookie settings
SESSION_COOKIE_NAME = 'sessionid'  # The name of the session cookie to use
SESSION_COOKIE_PATH = '/'
SESSION_COOKIE_DOMAIN = None  # Set to your domain in production (e.g., '.example.com')
SESSION_COOKIE_SECURE = False  # Set to True in production with HTTPS
SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access to the session cookie
SESSION_COOKIE_SAMESITE = 'Lax'  # or 'None' if using HTTPS and you need cross-site requests

# CSRF settings - important for frontend frameworks
CSRF_USE_SESSIONS = False  # Store CSRF token in cookie, not session
CSRF_COOKIE_NAME = 'csrftoken'
CSRF_COOKIE_AGE = 60 * 60 * 24 * 365  # 1 year in seconds
CSRF_COOKIE_SECURE = False  # Set to True in production with HTTPS
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript to read the CSRF token
CSRF_COOKIE_SAMESITE = 'Lax'  # or 'None' if using HTTPS and you need cross-site requests
CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'  # The header to use for CSRF token
CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'  # Default CSRF failure view

# Security settings
# Security Headers
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
X_CONTENT_TYPE_OPTIONS = 'nosniff'
X_XSS_PROTECTION = '1; mode=block'
SECURE_REFERRER_POLICY = 'same-origin'

# SSL/HTTPS settings (uncomment in production)
# SECURE_SSL_REDIRECT = True
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True
# SECURE_HSTS_SECONDS = 31536000  # 1 year
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True

# Additional security settings
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin-allow-popups'

# Content Security Policy (CSP) - Basic configuration
# Note: This is a basic configuration. You should customize it based on your needs.
# CSP_DEFAULT_SRC = ["'self'"]
# CSP_SCRIPT_SRC = ["'self'", "'unsafe-inline'", "'unsafe-eval'"]
# CSP_STYLE_SRC = ["'self'", "'unsafe-inline'"]
# CSP_IMG_SRC = ["'self'", "data:", "https:']
# CSP_FONT_SRC = ["'self'"]
# CSP_CONNECT_SRC = ["'self'"]
# CSP_FRAME_SRC = ["'self'"]
# CSP_OBJECT_SRC = ["'none'"]
# CSP_BASE_URI = ["'self'"]
# CSP_FORM_ACTION = ["'self'"]
# CSP_FRAME_ANCESTORS = ["'self'"]
# CSP_WORKER_SRC = ["'self'"]
# CSP_MEDIA_SRC = ["'self'"]
# CSP_MANIFEST_SRC = ["'self'"]
# CSP_UPGRADE_INSECURE_REQUESTS = True

# CORS and CSRF trusted origins should match
CSRF_TRUSTED_ORIGINS = CORS_ALLOWED_ORIGINS if hasattr(globals(), 'CORS_ALLOWED_ORIGINS') else [
    'http://localhost:3000',  # Default React port
    'http://localhost:8000',  # Default Django port
    'http://localhost:5176',  # Vite dev server (frontend)
    'http://127.0.0.1:5176',  # Vite dev server (frontend)
    'http://127.0.0.1:8000',  # Django dev server
    'http://192.168.1.42:8000',  # Local network
    'http://192.168.1.42:5176',  # Local network (frontend),
    'https://aae.alagappainfotech.com',
    'https://api.alagappainfotech.com',
]
REST_FRAMEWORK = {
    # Authentication & Permissions
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    
    # Request/Response Handling
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    'DEFAULT_CONTENT_NEGOTIATION_CLASS': 'rest_framework.negotiation.DefaultContentNegotiation',
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    
    # Pagination & Filtering
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    
    # Throttling (uncomment and customize as needed)
    # 'DEFAULT_THROTTLE_CLASSES': [
    #     'rest_framework.throttling.AnonRateThrottle',
    #     'rest_framework.throttling.UserRateThrottle',
    # ],
    # 'DEFAULT_THROTTLE_RATES': {
    #     'anon': '100/day',
    #     'user': '1000/day',
    # },
    
    # Versioning (uncomment and customize as needed)
    # 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',
    # 'DEFAULT_VERSION': 'v1',
    # 'ALLOWED_VERSIONS': ['v1', 'v2'],
    # 'VERSION_PARAM': 'version',
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    
    # Throttling
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',
        'user': '1000/day',
    },
    
    # Versioning
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',
    'ALLOWED_VERSIONS': ['v1'],
    'DEFAULT_VERSION': 'v1',
    'VERSION_PARAM': 'version',
    
    # Testing
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'TEST_REQUEST_RENDERER_CLASSES': [
        'rest_framework.renderers.MultiPartRenderer',
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.TemplateHTMLRenderer',
    ],
    
    # Metadata & Formatting
    'DEFAULT_METADATA_CLASS': 'rest_framework.metadata.SimpleMetadata',
    'DATETIME_FORMAT': 'iso-8601',
    'DATETIME_INPUT_FORMATS': ['iso-8601'],
    'DATE_FORMAT': 'iso-8601',
    'DATE_INPUT_FORMATS': ['iso-8601'],
    'TIME_FORMAT': 'iso-8601',
    'TIME_INPUT_FORMATS': ['iso-8601'],
    
    # Security
    'UNAUTHENTICATED_USER': 'django.contrib.auth.models.AnonymousUser',
    'UNAUTHENTICATED_TOKEN': None,
}

# JWT Settings
from datetime import timedelta

SIMPLE_JWT = {
    # Token lifetime
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,

    # Algorithm and signing
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    # User identification
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    # Token types
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    # JWT ID claim
    'JTI_CLAIM': 'jti',

    # Sliding tokens
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=60),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),

    # Cookie settings for JWT tokens
    'AUTH_COOKIE': 'access_token',  # Cookie name for access token
    'AUTH_COOKIE_SECURE': False,  # Set to True in production with HTTPS
    'AUTH_COOKIE_HTTP_ONLY': False,  # Allow JavaScript to read the cookie
    'AUTH_COOKIE_SAMESITE': 'Lax',  # Protection against CSRF attacks
    'AUTH_COOKIE_PATH': '/',  # The path of the auth cookie
    'AUTH_COOKIE_DOMAIN': None,  # Set to your domain in production
    'AUTH_COOKIE_SAME_SITE': 'Lax',  # Compatibility with older browsers
    'AUTH_COOKIE_MAX_AGE': 3600,  # 1 hour in seconds (matches ACCESS_TOKEN_LIFETIME)
    
    # Refresh token cookie settings
    'REFRESH_TOKEN_COOKIE': 'refresh_token',
    'REFRESH_TOKEN_COOKIE_SECURE': False,  # Set to True in production with HTTPS
    'REFRESH_TOKEN_COOKIE_HTTP_ONLY': True,  # Prevent XSS attacks
    'REFRESH_TOKEN_COOKIE_SAMESITE': 'Lax',
    'REFRESH_TOKEN_COOKIE_MAX_AGE': 60 * 60 * 24 * 7,  # 7 days in seconds (matches REFRESH_TOKEN_LIFETIME)
    
    # Header settings
    'AUTH_HEADER_TYPES': ('Bearer', 'JWT'),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    
    # Token serializers
    'TOKEN_OBTAIN_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenObtainPairSerializer',
    'TOKEN_REFRESH_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenRefreshSerializer',
    'TOKEN_VERIFY_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenVerifySerializer',
    'TOKEN_BLACKLIST_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenBlacklistSerializer',
    'SLIDING_TOKEN_OBTAIN_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer',
    'SLIDING_TOKEN_REFRESH_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer',
    
    # Custom claims
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    'JTI_CLAIM': 'jti',
}



ROOT_URLCONF = 'core.urls'

# Static files configuration
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# WhiteNoise configuration for serving static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Additional WhiteNoise settings
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = True

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Email backend for development
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'noreply@example.com'

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'debug.log'),
            'formatter': 'verbose',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': ['require_debug_true'],
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.urls': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.middleware': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'registration.exception_handler.custom_exception_handler',
}

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
